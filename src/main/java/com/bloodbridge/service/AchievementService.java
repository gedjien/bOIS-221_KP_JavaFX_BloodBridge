package com.bloodbridge.service;

import com.bloodbridge.model.Achievement;
import com.bloodbridge.model.Donor;
import com.bloodbridge.model.DonorStatistics;
import com.bloodbridge.util.JsonDataManager;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import java.util.List;
import java.util.ArrayList;
import java.util.stream.Collectors;
import java.time.LocalDateTime;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ –≤ —Å–∏—Å—Ç–µ–º–µ BloodBridge.
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤—ã–¥–∞—á—É –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–æ–Ω–æ—Ä–æ–≤.
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –ª–æ–≥–∏–∫—É –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.
 */
public class AchievementService {
    private static final String ACHIEVEMENTS_FILE = "data/achievements.json";
    private static final String DONOR_ACHIEVEMENTS_FILE = "data/donor_achievements.json";
    private final JsonDataManager jsonDataManager;
    private final ObservableList<Achievement> achievements;
    private final ObservableList<Achievement> donorAchievements;

    public AchievementService() {
        this.jsonDataManager = new JsonDataManager();
        this.achievements = FXCollections.observableArrayList();
        this.donorAchievements = FXCollections.observableArrayList();
        initializeAchievements();
    }

    private void initializeAchievements() {
        List<Achievement> loadedAchievements = jsonDataManager.loadAchievements();
        if (loadedAchievements == null || loadedAchievements.isEmpty()) {
            createDefaultAchievements();
            jsonDataManager.saveAchievements(achievements);
        } else {
            achievements.setAll(loadedAchievements);
        }

        List<Achievement> loadedDonorAchievements = jsonDataManager.loadDonorAchievements();
        if (loadedDonorAchievements != null) {
            donorAchievements.setAll(loadedDonorAchievements);
        }
    }

    private void createDefaultAchievements() {
        achievements.add(new Achievement("1", "–ü–µ—Ä–≤–∞—è –¥–æ–Ω–∞—Ü–∏—è", "üèÜ", "–°–¥–µ–ª–∞–ª –ø–µ—Ä–≤—É—é –¥–æ–Ω–∞—Ü–∏—é –∫—Ä–æ–≤–∏"));
        achievements.add(new Achievement("2", "–í–µ—Ç–µ—Ä–∞–Ω", "‚≠ê", "–°–¥–µ–ª–∞–ª 5 –¥–æ–Ω–∞—Ü–∏–π"));
        achievements.add(new Achievement("3", "–ì–µ—Ä–æ–π", "üëë", "–°–¥–µ–ª–∞–ª 10 –¥–æ–Ω–∞—Ü–∏–π"));
        achievements.add(new Achievement("4", "–†–µ–≥—É–ª—è—Ä–Ω—ã–π –¥–æ–Ω–æ—Ä", "üîÑ", "–°–¥–µ–ª–∞–ª –¥–æ–Ω–∞—Ü–∏—é –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –º–µ—Å—è—Ü–µ–≤"));
        achievements.add(new Achievement("5", "–°–ø–∞—Å–∏—Ç–µ–ª—å", "‚ù§Ô∏è", "–°–¥–µ–ª–∞–ª –¥–æ–Ω–∞—Ü–∏—é –≤ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏"));
    }

    public List<Achievement> getAllAchievements() {
        return new ArrayList<>(achievements);
    }

    public List<Achievement> getDonorAchievements(String donorId) {
        System.out.println("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –¥–æ–Ω–æ—Ä–∞ ID: " + donorId);
        List<Achievement> achievements = donorAchievements.stream()
                .filter(a -> a.getDonorId().equals(donorId))
                .collect(Collectors.toList());
        System.out.println("–ù–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: " + achievements.size());
        return achievements;
    }

    public ObservableList<Achievement> getDonorAchievements(Donor donor) {
        if (donor == null) {
            return FXCollections.observableArrayList();
        }

        DonorStatistics statistics = DonorStatisticsService.calculateStatistics(donor);
        List<Achievement> earnedAchievements = new ArrayList<>();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–Ω–∞—Ü–∏–π
        if (statistics.getCompletedDonations() >= 1) {
            Achievement achievement = findAchievement("1"); // –ü–µ—Ä–≤–∞—è –¥–æ–Ω–∞—Ü–∏—è
            if (achievement != null) {
                achievement.setDonorId(donor.getId().toString());
                achievement.setDateAwarded(LocalDateTime.now());
                earnedAchievements.add(achievement);
            }
        }
        if (statistics.getCompletedDonations() >= 5) {
            Achievement achievement = findAchievement("2"); // –í–µ—Ç–µ—Ä–∞–Ω
            if (achievement != null) {
                achievement.setDonorId(donor.getId().toString());
                achievement.setDateAwarded(LocalDateTime.now());
                earnedAchievements.add(achievement);
            }
        }
        if (statistics.getCompletedDonations() >= 10) {
            Achievement achievement = findAchievement("3"); // –ì–µ—Ä–æ–π
            if (achievement != null) {
                achievement.setDonorId(donor.getId().toString());
                achievement.setDateAwarded(LocalDateTime.now());
                earnedAchievements.add(achievement);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å
        if (statistics.getLastDonationDate() != null && 
            statistics.getLastDonationDate().plusMonths(3).isAfter(LocalDateTime.now())) {
            Achievement achievement = findAchievement("4"); // –†–µ–≥—É–ª—è—Ä–Ω—ã–π –¥–æ–Ω–æ—Ä
            if (achievement != null) {
                achievement.setDonorId(donor.getId().toString());
                achievement.setDateAwarded(LocalDateTime.now());
                earnedAchievements.add(achievement);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Ä–µ–¥–∫—É—é –≥—Ä—É–ø–ø—É –∫—Ä–æ–≤–∏
        if (isRareBloodGroup(donor.getBloodGroup())) {
            Achievement achievement = findAchievement("5"); // –°–ø–∞—Å–∏—Ç–µ–ª—å
            if (achievement != null) {
                achievement.setDonorId(donor.getId().toString());
                achievement.setDateAwarded(LocalDateTime.now());
                earnedAchievements.add(achievement);
            }
        }

        return FXCollections.observableArrayList(earnedAchievements);
    }

    public void awardAchievement(String donorId, String achievementId) {
        System.out.println("–í—ã–¥–∞—á–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è. DonorId: " + donorId + ", AchievementId: " + achievementId);
        Achievement achievement = findAchievement(achievementId);
        if (achievement != null) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–¥–∞–Ω–æ –ª–∏ —É–∂–µ —ç—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            boolean alreadyAwarded = donorAchievements.stream()
                .anyMatch(a -> a.getDonorId().equals(donorId) && a.getId().equals(achievementId));
            
            System.out.println("–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É–∂–µ –≤—ã–¥–∞–Ω–æ: " + alreadyAwarded);
            
            if (!alreadyAwarded) {
                Achievement donorAchievement = new Achievement(
                    achievement.getId(),
                    achievement.getTitle(),
                    achievement.getIcon(),
                    achievement.getDescription()
                );
                donorAchievement.setDonorId(donorId);
                donorAchievement.setDateAwarded(LocalDateTime.now());
                donorAchievements.add(donorAchievement);
                System.out.println("–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫");
                jsonDataManager.saveDonorAchievements(donorAchievements);
                System.out.println("–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª");
            }
        } else {
            System.out.println("–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!");
        }
    }

    private Achievement findAchievement(String id) {
        return achievements.stream()
                .filter(a -> a.getId().equals(id))
                .findFirst()
                .orElse(null);
    }

    private boolean isRareBloodGroup(String bloodGroup) {
        return bloodGroup != null && (bloodGroup.equals("AB-") || bloodGroup.equals("B-"));
    }
} 